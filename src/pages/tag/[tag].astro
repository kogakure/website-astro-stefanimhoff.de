---
import { getCollection } from 'astro:content';

import { formatPosts } from '../../utils';
import { animationDelay } from '../../data/site';

import GridLayout from '../../layouts/GridLayout.astro';
import PageTitle from '../../components/PageTitle.astro';
import JournalList from '../../components/JournalList.astro';
import { Tag } from '../../components';

import type { CollectionEntry } from 'astro:content';
interface Props {
	entries: CollectionEntry<'journal'>[];
	uniqueTags: string[];
}

export async function getStaticPaths() {
	const journalEntries = await getCollection('journal');
	const formattedJournalEntries = formatPosts(journalEntries, {});

	const uniqueTags = [...new Set(formattedJournalEntries.map((entry) => entry.data.tags).flat())];
	uniqueTags.sort((a, b) => a.localeCompare(b));

	return uniqueTags.map((tag) => {
		const filteredEntries = formattedJournalEntries.filter((entry) =>
			entry.data.tags.includes(tag)
		);
		return {
			params: { tag },
			props: {
				entries: filteredEntries,
				uniqueTags: uniqueTags,
			},
		};
	});
}

const { tag } = Astro.params;
const { entries, uniqueTags } = Astro.props;

const title = 'Journal';
const description = 'â€¦';
---

<GridLayout
	title={title}
	description={description}
	grid="wide"
	class="grid"
	innerGrid
	backLink="/journal/"
>
	<PageTitle slot="title" class="capitalize">
		{tag}
	</PageTitle>
	<aside class="col-start-1 col-end-18 flex flex-wrap gap-y-3" {...animationDelay}>
		{
			uniqueTags.map((uTag) => (
				<Tag active={uTag === tag} href={`/tag/${uTag}/`}>
					{uTag}
				</Tag>
			))
		}
	</aside>
	<nav class="col-start-1 col-end-18" aria-label="Journal">
		<JournalList entries={entries} />
	</nav>
</GridLayout>
